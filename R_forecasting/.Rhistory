str(elecequip)
frequency(elecequip)
eeadj <- seasadj(stl(elecequip, s.window = "periodic"))
plot(eeadj)
plot(elecequip)
plot(demandTS)
plot(demandTS[1:96])
plot(demandTS[1:96], type='l')
plot(demandTS)
demandAdj <- seasadj(stl(demandTS, s.window="periodic"))
plot(demandAdj)
tsdisplay(demandAdj)
S
tsdisplay(demandTS)
tsdisplay(demandAdj)
fit <- Arima(eeadj, order=c(3,1,1))
summary(fit)
Acf(residuals(fit))
Pacf(residuals(fit))
Box.test(residuals(fit), lag=24, fitdf=4, type"Ljung")
Box.test(residuals(fit), lag=24, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=1, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=2, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=24, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=48, fitdf=4, type="Ljung")
auto.arima(elecequip)
auto.arima(eeadj)
Pacf(residuals(fit))
Acf(residuals(fit))
hist(residuals(fit))
source("utilityFunctions.R")
histWithNormal(residuals(fit))
plot(euretail, ylab='Retail Index', xlab='Year')
tsdisplay(diff(euretail, 4))
tsdisplay(diff(diff(euretail, 4)))
fit <- Arima(euretail, order=c(0,1,1), seasonal=c(0,1,1))
tsdisplay(residuals(fit))
fit3 <- Arima(euretail, order=c(0,1,3), seasonal=c(0,1,1))
res <- residuals(fit3)
tsdisplay(res)
Box.test(res, lag=16, fitdf=4, type="Ljung")
frequency(euretail)
fit_auto <- auto.arima(euretail)
print(fit_auto)
fit_auto_full <- auto.arima(euretail, stepwise=F, approximation=F)
print(fit_auto)
print(fit_auto_full)
lh02 <- log(h02)
par(mfrow=c(2,1))
plot(h02, ylab="H02 sales (million scripts)", xlab="year")
plot(lh02, ylab="Log H02 sales", xlab="Year")
tsdisplay(diff(lh02, 12), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(diff(lh02, 12)), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(lh02, 12), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(diff(lh02, 12)), main="Seasonally differenced log H02 scripts", xlab="year")
auto.arima(lh02)
fit <- Arima(h02, order=c(3,0,1), seasonal=c(0,1,2), lambda=0)
print(fit)
tsdisplay(residuals(fit))
Box.test(residuals(fit), lag=36, fitdf=6, type="Ljung")
source("utilityFunctions.R")
getRMSE(h02, h=24, order=c(3,0,0), seasonal=c(2,1,0), lambda=0)
getRMSE(h02, h=24, order=c(3,0,0), seasonal=c(2,1,0))
getRMSE(h02, h=24, order=c(3,0,1), seasonal=c(2,1,0), lambda=0)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
plot(fcast)
plot(fcRMSEs, type="l",col="red", ylim=c(min(c(fcRMSEs, NP_RMSEs)),
max(c(fcRMSEs, NP_RMSEs))))
lines(NP_RMSEs, col="green")
nFcasts
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
print(results_df)
print(results_NP_df)
proc.time() - ptm
print(proc.time() - ptm)
ptm <- proc.time()
print(ptm <- proc.time())
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
trainTS
Arima(trainTS, order=c(3,0,0), seasonal=c(1,0,0))
max(trainTS)
min(trainTS)
plot.ts(trainTS)
seasonplot(trainTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
fit <- Arima(trainTS, order=c(3,0,0), seasonal=c(1,0,0))
fit <- Arima(trainTS, order=c(3,0,0), seasonal=c(1,0,0),
method="CSS")
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
print(results_df)
print(results_NP_df)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
library(forecast)
t <- 0:0.1:1
t
t <- 0:10/10
t
source('~/PhD/femc/R_forecasting/generateValidationData.R')
plot(t, x)
t <- (0:10000)/1000
x <- sin(t*(48/(2*pi)))
plot(t, x)
t
source('~/PhD/femc/R_forecasting/generateValidationData.R')
plot(t, x)
plot(t, x, type='l')
t <- 0:1000
x <- sin(t)
plot(t, x, type='l')
plot(t, x)
2*PI
2*pi
t <- seq(0,10*2*pi,length=10*48)
x <- sin(t)
plot(t, x)
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
plot(t, x)
forecast(fit, h=48)
fc <- forecast(fit, h=48)
plot(fc)
rand(5)
randu(1)
rnorm(1)
rnorm(10)
length(t)
source('~/PhD/femc/R_forecasting/generateValidationData.R')
fit
fit
plot(fit)
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
clc
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
seasonality=5;
nPeriods=10;
noiseReduction = 10;
t <- seq(0,nPeriods*2*pi,length=nPeriods*seasonality)
x <- sin(t) + rnorm(length(t))/noiseReduction
plot(t, x, type='l');
xTS <- ts(x, frequency = 48)
fit <- Arima(x, order=c(3,0,0), seasonal=c(1,0,0))
print(fit)
fc <- forecast(fit, h=48)
plot(fc);
seasonality=5;
nPeriods=10;
noiseReduction = 10;
t <- seq(0,nPeriods*2*pi,length=nPeriods*seasonality)
x <- sin(t) + rnorm(length(t))/noiseReduction
plot(t, x, type='l');
xTS <- ts(x, frequency = seasonality)
fit <- Arima(x, order=c(3,0,0), seasonal=c(1,0,0))
print(fit)
fc <- forecast(fit, h=seasonality)
plot(fc);
fitAuto <- auto.arima(x)
print(fitAuto)
fcAuto <- forecast(fitAuto, h=seasonality)
plot(fcAuto);
source('~/PhD/femc/R_forecasting/generateValidationData.R')
frequency(xTS)
xTS
forecast(xTS)
plot(forecast(xTS))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
fit
# fitAuto <- auto.arima(x)
# print(fitAuto)
# fcAuto <- forecast(fitAuto, h=seasonality)
# plot(fcAuto);
# print(fitAuto)
# fcAuto <- forecast(fitAuto, h=seasonality)
# plot(fcAuto);
fitAuto <- auto.arima(x)
print(fitAuto)
fcAuto <- forecast(fitAuto, h=seasonality)
plot(fcAuto);
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
s
x
view(x)
View(x)
writeClipboard(x)
writeClipboard( as.character(x) )
writeClipboard( as.character(fc$mean))
fitted(fit)
ans <- fitted.values(fit)
ans
str(ajns)
str(ans)
fit
fit$coef
fit$coef[1]
fit$coef[1] <- 0.5
fit$coef
fit$coef[2] <- 0.3
fit$coef[3] <- 0.03
fit$coef[4] <- 0.0
fit$coef
print(fit)
fc <- forecast(fit, h=seasonality)
plot(fc);
writeClipboard( as.character(fc$mean))
fit <- Arima(x, order=c(3,0,0), seasonal=c(1,0,0))
print(fit)
fc <- forecast(fit, h=seasonality)
fit$arma
fit$model
fit$coef
length(fit$coef)
fit <- Arima(x, order=c(3,0,0), seasonal=list(order=c(1,0,0), period=seasonality))
print(fit)
fc <- forecast(fit, h=seasonality)
plot(fc);
fit <- Arima(x, order=c(3,0,0), seasonal=list(order=c(1,0,0), period=seasonality))
print(fit)
fc <- forecast(fit, h=seasonality)
plot(fc);
fit$coef
fit$coef <- c(1, 2, 3, 4, 5)
fit$coef
fit <- Arima(x, order=c(3,0,0), seasonal=list(order=c(1,0,0), period=seasonality))
str(fit$coef)
values(fit$coef)
names(fit$coef)
fit$coef[1:5]
fit$coef[1:5] <- c(1:5)
fit$coef
fit$coef[1:5] <- c(0.799819098141606  0.270413996749770	-0.411440150209374	0.314170274008702)
fit$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702)
fit$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fit
fcMatlab <- forecast(fit, h=seasonality)
plot(fcMatlab)
fcMatlab <- forecast(fit, h=seasonality)
plot(fcMatlab)
plot(fcMatlab)
fit <- Arima(x,model=fit)
fit
fitMatlab <- fit
fitMatlab$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fitMatlab <- Arima(x,model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
fitMatlab <- fit
fitMatlab$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fitMatlab <- Arima(x,model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
plot(fcMatlab)
x
plot(x)
plot(x, type='l')
plot(tail(x, n=seasonality), type='l')
fitMatlab <- Arima(tail(x, n=seasonality),model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
plot(fcMatlab$mean)
fitMatlab
fitMatlab$sigma2
fitMatlab$var.coef
fitMatlab$mask
fitMatlab$loglik
fitMatlab$residuals
plot(fitMatlab$residuals)
fitMatlab$call
fitMatlab$series
fitMatlab$code
fitMatlab$series
fitMatlab$n.cond
fitMatlab$model
fitMatlab$aicc
fitMatlab$x
Acf(fitMatlab$residuals)
source('~/.active-rstudio-document')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(x));
plot(fcAuto, xlab='auto.arima() model forecast')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
print(fit)
fit$coef[1:5]
as.character(fit$coef[1:5])
writeClipboard(as.character(fit$coef[1:5]))
writeClipboard(as.character(fc$mean))
writeClipboard(as.character(fit$coef[1:5]))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fc$mean))
writeClipboard(as.character(x))
writeClipboard(as.character(fit$coef))
0.450261684019779
0.28245660245168
0.174661268582532
0.394959662477209
0
writeClipboard(as.character(fcMatlabZeroAR$mean))
writeClipboard(as.character(fcMatlabZeroSAR$mean))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
fitMatlabZeroSAR$coef
fitMatlabZeroAR$coef
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fcMatlabZeroSAR$mean))
writeClipboard(as.character(fcMatlabZeroAR$mean))
plot(fcMatlabZeroAR, xlab='Matlab-fitted model forecast, zero AR')
fitMatlabZeroAR$coef
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fcMatlabZeroAR$mean))
writeClipboard(as.character(fcMatlabZeroSAR$mean))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
min(1,2,3)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
forecast(demandData)
dataSoFarTS
plot(dataSoFarTS)
forecast(dataSoFarTS)
plot(forecast(demandSoFarTS))
plot(forecast(dataSoFarTS))
plot(forecast(dataSoFarTS)$mean)
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean))
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean), type='l')
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean, h=48), type='l')
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS, h=48)$mean), type='l')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
results_NP_df
results_NP_df$mean <- mean(results_NP_df$X1, results_NP_df$X2)
results_NP_df$mean <- 0.5*(results_NP_df$X1 + results_NP_df$X2)
results_NP_df
rowNames(results_NP_df)
rownames(results_NP_df)
plot(rownames(results_NP_df), results_NP_df$mean)
plot(rownames(results_NP_df), results_NP_df$mean, type='l')
results_automated_df$mean <- 0.5*(results_automated_df$X1 + results_automated_df$X2)
lines(rownames(results_automated_df), results_automated_df$mean, col='red')
plot(rownames(results_NP_df), results_automated_df$mean/results_NP_df$mean, type='l')
accuracy(NP, actual)
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X#)
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(NP_MAPE$X1[[]], NP_MAPE$X2[[]], NP_MAPE$X3[[]])
NP_MAPE$X1[[]]
NP_MAPE$X1
mean(NP_MAPE$X1)
mean(NP_MAPE$X1[[]], NP_MAPE$X2[[]], NP_MAPE$X3[[]])
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(cbind(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
)
mean(rbind(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3))
rowMeans(NP_MAPE)
rowMeans(NP_MAPE[, 3])
rowMeans(NP_MAPE[, 2:3])
rowMeans(NP_MAPE[, 3:3])
rowMeans(NP_MAPE[, 1:3])
rowSds
NP_MAPE
transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -c("mean")],1,sd,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -c('mean')],1,sd,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -('mean')],1,sd,na.rm=TRUE))
NP_MAPE[, "mean"]
NP_MAPE[, 'mean']
NP_MAPE[, ('mean')]
NP_MAPE[, c("mean")]
NP_MAPE
transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE
NP_MAPE[, c("mean")]
NP_MAPE[, -c("mean")]
NP_MAPE[, -c('mean)]
NP_MAPE[, -c('mean;')]
NP_MAPE[, -c('mean')]
NP_MAPE
transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)) +
geom_line((x = rownames(auto_MAPE), y = auto_MAPE$mean))
ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std))
NP_MAPE
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, mean=apply(auto_MAPE,1,mean,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, std=apply(subset(auto_MAPE, select=-mean),1,sd,na.rm=TRUE))
NP_MAPE
auto_MAPE
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)) +
geom_line(aes(x = rownames(auto_MAPE), y = auto_MAPE$mean, col='red')))
rbind(NP_MAPE$mean, auto_MAPE$mean)
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = rbind(NP_MAPE$mean, auto_MAPE$mean))) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(NP_MAPE, aes(x = rbind(rownames(NP_MAPE), rownames(auto_MAPE)),
y = rbind(NP_MAPE$mean, auto_MAPE$mean))) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, mean=apply(auto_MAPE,1,mean,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, std=apply(subset(auto_MAPE, select=-mean),1,sd,na.rm=TRUE))
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPEE$mean, NP_std = NP_MEAN$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPE$mean, NP_std = NP_MEAN$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
NP_MAPE
auto_MAPE
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPE$mean, NP_std = NP_MAPE$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
MAPEresults
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)))
geom_line(aes(y=auto_mean, colour='black')) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, colour='black')) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, colour='red')))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, col='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='red')))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
MSEresults <- data.frame(nCustomers=nCustomers, NP_mean=apply(results_NP_df,1,mean,na.rm=TRUE),
NP_std = apply(results_NP_df,1,sd,na.rm=TRUE),
auto_mean=apply(results_automated_df,1,mean,na.rm=TRUE),
auto_std=apply(results_automated_df,1,sd,na.rm=TRUE),
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
)
MSEresults
MSEresults <- data.frame(nCustomers=nCustomers, NP_mean=apply(results_NP_df,1,mean,na.rm=TRUE),
NP_std = apply(results_NP_df,1,sd,na.rm=TRUE),
auto_mean=apply(results_automated_df,1,mean,na.rm=TRUE),
auto_std=apply(results_automated_df,1,sd,na.rm=TRUE))
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
historicData <- read.table('historicData.csv', header=FALSE, sep=',')
pwd
pwd()
getwd()
cd..
cd('../')
setwd('../functions//Rforecasting')
historicData <- read.table('historicData.csv', header=FALSE, sep=',')
historicData
summary(historicData)
str(historicData)
horizon <- read.table('intervalsToForecast.csv', header=FALSE, sep=',')
horizon
k <- read.table('seasonality.csv', header=FALSE, sep=',')
k
library(forecast)
historicDataTimeSeries <- ts(historicData, frequency=k);
str(historicData)
str(as.numeric(historicData))
str(as.numeric(historicData$V1))
historicDataTimeSeries <- ts(historicData$V1, frequency=k);
historicDataTimeSeries <- ts(as.numeric(historicData$V1), frequency=k);
k
historicDataTimeSeries <- ts(historicData$V1, frequency=k$V1);
thisForecast <- forecast(historicDataTimeSeries, h=horizon$V1)
plot(thisForecast)
thisForecast$mean
horizon
