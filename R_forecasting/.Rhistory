library(astsa)
install.packages('astsa')
library(astsa)
flow <- ts(scan("coloradoflow.dat"))
plot(diff(log(a10),12), xlab="Year",
ylab="Annual change in monthly log A10 sales")
library(forecast)
plot(diff(log(a10),12), xlab="Year",
ylab="Annual change in monthly log A10 sales")
load(a10)
load('a10')
File1 <- read.table("C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/data/File1.txt", quote="\"")
View(File1)
str(File1)
summary(File1)
uniqueMeters <- unique(File1$V1)
head(uniqueMeters)
nMeterReads <- vector("list", length(uniqueMeters))
nMeterReads
1:4
File1[File1$V1==1392, ]
head(File1[File1$V1==1392, ])
length(File1[File1$V1==1392, ])
length(File1[File1$V1==1392, 1])
length(File1[File1$V1==1393, 1])
length(File1[File1$V1==1394, 1])
length(File1[File1$V1==1395, 1])
demandTable <- File1
for (meterIdx in 1:nUniqueMeters) {
meter <- uniqueMeters[meterIdx]
nMeterReads[meterIdx] <- length()
}
nUniqueMeters <- length(uniqueMeters)
nUniqueMeters
nMeterReads <- vector("list", nUniqueMeters)
for (meterIdx in 1:nUniqueMeters) {
meter <- uniqueMeters[meterIdx]
nMeterReads[meterIdx] <- length()
}
for (meterIdx in 1:nUniqueMeters) {
meter <- uniqueMeters[meterIdx]
nMeterReads[meterIdx] <- length(demandTable[demandTable$V1==meter, 1])
}
head(nMeterReads)
histogr
hist(nMeterReadS)
hist(nMeterReads)
hist(nMeterReads[[]])
hist(nMeterReads[[:]])
hist(nMeterReads[:])
hist(nMeterReads)
hist(as.numeric(nMeterReads)
)
summary(nMeterReadS)
summary(nMeterRead)
summary(nMeterReads)
summary(as.data.frame(nMeterReads))
summary(as.numerice(nMeterReads))
summary(as.numeric(nMeterReads))
count(as.numeric(nMeterReads))
table(as.numeric(nMeterReads))
table(as.numeric(nMeterReads))
max(table(as.numeric(nMeterReads)))
table(as.numeric(nMeterReads))[1]
table(as.numeric(nMeterReads))[2]
table(as.numeric(nMeterReads))
max(table(as.numeric(nMeterReads)))
table(as.numeric(nMeterReads))[max(table(as.numeric(nMeterReads)))]
table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))]
table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1]
table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1, 1]
table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1]
name(table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1])
str(table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1])
names(table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1])
as.numeric(names(table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))][1]))
commonReads <- as.numeric(names(table(as.numeric(nMeterReads))[table(as.numeric(nMeterReads)) == max(table(as.numeric(nMeterReads)))]))
commonReads
nMeterReads == commonReads
uniqueMeters[nMeterReads == commonReads]
length(uniqueMeters[nMeterReads == commonReads])
metersWithCommonReads <- uniqueMeters[nMeterReads == commonReads]
metersWithCommonReads
length(metersWithCommonReads)
demand_3639 <- read.csv("~/PhD/femc/data/demand_3639.csv", header=FALSE)
View(demand_3639)
dim(demand_3639)
dim(demand_3639)[1]
dim(demand_3639)[2]
dim(demand_3639[, 1])
dim(demand_3639[1, 1])
head(demand_3639[1, 1])
head(demand_3639[1, ])
head(demand_3639[, 1])
head(demand_3639\)
head(demand_3639)
head(demand_3639[, 1])
head(demand_3639[, 1:2])
head(demand_3639[, 1:5])
head(sum(demand_3639[, 1:5])
)
head(colSums(demand_3639[, 1:5])
)
head(rowSums(demand_3639[, 1:5])
)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nCustomers = 1;
dataFile = "~/PhD/femc/data/demand_3639.csv"
demandData <- read.csv(dataFile, header=FALSE)
nReads = dim(demandData)[1]
nMeters = dim(demandData)[2]
customerIndexes <- sample(1:nMeters, nCustomers, replace=F)
demandSignal <- rowSums(demandData[, customerIndexes])
customerIndexes
if (nCustomers > 1) {
demandSignal <- rowSums(demandData[, customerIndexes])
} else {
demandSignal <- demandData[, customerIndexes]
}
plot.ts(demandSignal)
S = 48
demandTS <- ts(demandSignal, frequency=S)
plot.ts(demandTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nsdiffs(demandTS)
acf(demandTS)
ndiffs(demandTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nCustomers = 10
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
29*48
20*48
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
subSeries
48*60
subSeries = 1:(48*20)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
acf(demandStart)
acf(demandStar)
acf(demandTS)
acf(demandStar)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
seasonplot(demandTS)
seasonplot(demandStar)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nCustomers = 250
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nsdiffs(log(AirPassengers))
nsdiffs(AirPassengers)
plot.ts(AirPassengers)
plot.ts(log(AirPassengers))
plot.ts(demandTS)
plot.ts(log(demandTS))
str(demandTS)
frequency(demandTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
frequency(demandTS)
nsdiffs(demandTS)
nsdiffs(log(demandTS))
plot.ts(demandTS)
seasonplot(demandTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
plot.ts(demandTS)
nsdiffs(demandTS)
plot.ts(log(demandTS))
nsdiffs(log(demandTS))
auto.arima(demandTS)
fit <- auto.arima(demandTS)
plot(forecast(fit, h=48))
print(fit)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
forecast(fir, h=48)
forecast(fit, h=48)
forecast(fit, h=48)[, 1]
dim(forecast(fit, h=48))
str(forecast(fit, h=48))
forecast(fit, h=48)$mean
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
max(subSeries) + 1:lForecast
subSeries
max(subSeries) + 1:lForecast
plot(demandSignal_full[max(subSeries) + 1:lForecast], fcast$mean)
grid()
abline(0, 1)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
48*100
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
25730/48
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
str(fcast)
fcast$actual <- demandSignal_full[max(subSeries) + 1:lForecast]
# plot(demandSignal_full[max(subSeries) + 1:lForecast], fcast$upper)
ggplot(fcast, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper))
library(ggplot2)
ggplot(fcast, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper))
fcast[, 'mean']
fcast[, c('mean')]
str(fcast)
fcast$mean
fcast$upper
fcast$upper[, 1]
fcast$upper[, 2]
fcast$lower
fcastVals$mean <- fcast$mean
fcastVals$upper <- fcast$upper[, 2]
fcastVals$lower <- fcast$lower[, 2]
fcastVals$actual <- demandSignal_full[max(subSeries) + 1:lForecast]
fcastVals <- list()
fcastVals$mean <- fcast$mean
fcastVals$upper <- fcast$upper[, 2]
fcastVals$lower <- fcast$lower[, 2]
fcastVals$actual <- demandSignal_full[max(subSeries) + 1:lForecast]
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper))
set.seed(42)
df <- data.frame(x = rep(1:10,each=5), y = rnorm(50))
library(ggplot2)
library(dplyr)
df.summary <- df %>% group_by(x) %>%
summarize(ymin = min(y),
ymax = max(y),
ymean = mean(y))
ggplot(df.summary, aes(x = x, y = ymean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = ymin, ymax = ymax))
str(df.summary)
fcastVals <- data.frame()
fcastVals$mean <- fcast$mean
fcastVals$upper <- fcast$upper[, 2]
fcastVals$lower <- fcast$lower[, 2]
fcastVals$actual <- demandSignal_full[max(subSeries) + 1:lForecast]
fcastVals
L3 <- LETTERS[1:3]
L#
L3
fac <- sample(L3, 10, replace=T)
face
face
fac
d <- data.frame(x=1, y=1:10, fac=fac)
d
fcastVals <- data.frame(mean = fcast$mean, upper = fcast$upper[, 2],
lower = fcast$lower[, 2], actual =
demandSignal_full[max(subSeries) + 1:lForecast])
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper))
grid()
str(fcastVals)
fcastVals <- data.frame(mean = as.numeric(fcast$mean), upper = fcast$upper[, 2],
lower = fcast$lower[, 2], actual =
demandSignal_full[max(subSeries) + 1:lForecast])
# plot(demandSignal_full[max(subSeries) + 1:lForecast], fcast$upper)
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper))
grid()
abline(0, 1)
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper) +
geom_abline(intercept=0, slope=1))
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_abline(intercept=0, slope=1))
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_abline(intercept=0, slope=1)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
print(fit)
fcast <- forecast(fit, h=lForecast)
fcastVals <- data.frame(mean = as.numeric(fcast$mean), upper = fcast$upper[, 2],
lower = fcast$lower[, 2], actual =
demandSignal_full[max(subSeries) + 1:lForecast])
# plot(demandSignal_full[max(subSeries) + 1:lForecast], fcast$upper)
# ==== Plot forecast point and range VS actuals === #
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_abline(intercept=0, slope=1)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
plot
plot()
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_abline(intercept=0, slope=1)
dev.off()
dev.off()
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
ggplot(fcastVals, aes(x = actual, y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_abline(intercept=0, slope=1)
tsdisplay(demandStar)
tsdisplay(demandStar2)
tsdisplay(demandTS)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
plot(fcast)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
tsdisplay(demandStar)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
nCustomers
plot(elecequip)
eeadj <- seasadj(stl(elecequip, s.window = "periodic"))
load('elecequip')
library(fpp)
install.packages(fpp)
install.packages('fpp')
library(fpp)
plot(elecequip)
str(elecequip)
frequency(elecequip)
eeadj <- seasadj(stl(elecequip, s.window = "periodic"))
plot(eeadj)
plot(elecequip)
plot(demandTS)
plot(demandTS[1:96])
plot(demandTS[1:96], type='l')
plot(demandTS)
demandAdj <- seasadj(stl(demandTS, s.window="periodic"))
plot(demandAdj)
tsdisplay(demandAdj)
S
tsdisplay(demandTS)
tsdisplay(demandAdj)
fit <- Arima(eeadj, order=c(3,1,1))
summary(fit)
Acf(residuals(fit))
Pacf(residuals(fit))
Box.test(residuals(fit), lag=24, fitdf=4, type"Ljung")
Box.test(residuals(fit), lag=24, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=1, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=2, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=24, fitdf=4, type="Ljung")
Box.test(residuals(fit), lag=48, fitdf=4, type="Ljung")
auto.arima(elecequip)
auto.arima(eeadj)
Pacf(residuals(fit))
Acf(residuals(fit))
hist(residuals(fit))
source("utilityFunctions.R")
histWithNormal(residuals(fit))
plot(euretail, ylab='Retail Index', xlab='Year')
tsdisplay(diff(euretail, 4))
tsdisplay(diff(diff(euretail, 4)))
fit <- Arima(euretail, order=c(0,1,1), seasonal=c(0,1,1))
tsdisplay(residuals(fit))
fit3 <- Arima(euretail, order=c(0,1,3), seasonal=c(0,1,1))
res <- residuals(fit3)
tsdisplay(res)
Box.test(res, lag=16, fitdf=4, type="Ljung")
frequency(euretail)
fit_auto <- auto.arima(euretail)
print(fit_auto)
fit_auto_full <- auto.arima(euretail, stepwise=F, approximation=F)
print(fit_auto)
print(fit_auto_full)
lh02 <- log(h02)
par(mfrow=c(2,1))
plot(h02, ylab="H02 sales (million scripts)", xlab="year")
plot(lh02, ylab="Log H02 sales", xlab="Year")
tsdisplay(diff(lh02, 12), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(diff(lh02, 12)), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(lh02, 12), main="Seasonally differenced log H02 scripts", xlab="year")
tsdisplay(diff(diff(lh02, 12)), main="Seasonally differenced log H02 scripts", xlab="year")
auto.arima(lh02)
fit <- Arima(h02, order=c(3,0,1), seasonal=c(0,1,2), lambda=0)
print(fit)
tsdisplay(residuals(fit))
Box.test(residuals(fit), lag=36, fitdf=6, type="Ljung")
source("utilityFunctions.R")
getRMSE(h02, h=24, order=c(3,0,0), seasonal=c(2,1,0), lambda=0)
getRMSE(h02, h=24, order=c(3,0,0), seasonal=c(2,1,0))
getRMSE(h02, h=24, order=c(3,0,1), seasonal=c(2,1,0), lambda=0)
