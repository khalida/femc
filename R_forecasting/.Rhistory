fit$coef <- c(1, 2, 3, 4, 5)
fit$coef
fit <- Arima(x, order=c(3,0,0), seasonal=list(order=c(1,0,0), period=seasonality))
str(fit$coef)
values(fit$coef)
names(fit$coef)
fit$coef[1:5]
fit$coef[1:5] <- c(1:5)
fit$coef
fit$coef[1:5] <- c(0.799819098141606  0.270413996749770	-0.411440150209374	0.314170274008702)
fit$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702)
fit$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fit
fcMatlab <- forecast(fit, h=seasonality)
plot(fcMatlab)
fcMatlab <- forecast(fit, h=seasonality)
plot(fcMatlab)
plot(fcMatlab)
fit <- Arima(x,model=fit)
fit
fitMatlab <- fit
fitMatlab$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fitMatlab <- Arima(x,model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
fitMatlab <- fit
fitMatlab$coef[1:5] <- c(0.799819098141606, 0.270413996749770, -0.411440150209374, 0.314170274008702, 0.0)
fitMatlab <- Arima(x,model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
plot(fcMatlab)
x
plot(x)
plot(x, type='l')
plot(tail(x, n=seasonality), type='l')
fitMatlab <- Arima(tail(x, n=seasonality),model=fitMatlab)
fcMatlab <- forecast(fitMatlab, h=seasonality)
plot(fcMatlab)
plot(fcMatlab$mean)
fitMatlab
fitMatlab$sigma2
fitMatlab$var.coef
fitMatlab$mask
fitMatlab$loglik
fitMatlab$residuals
plot(fitMatlab$residuals)
fitMatlab$call
fitMatlab$series
fitMatlab$code
fitMatlab$series
fitMatlab$n.cond
fitMatlab$model
fitMatlab$aicc
fitMatlab$x
Acf(fitMatlab$residuals)
source('~/.active-rstudio-document')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(x));
plot(fcAuto, xlab='auto.arima() model forecast')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
print(fit)
fit$coef[1:5]
as.character(fit$coef[1:5])
writeClipboard(as.character(fit$coef[1:5]))
writeClipboard(as.character(fc$mean))
writeClipboard(as.character(fit$coef[1:5]))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fc$mean))
writeClipboard(as.character(x))
writeClipboard(as.character(fit$coef))
0.450261684019779
0.28245660245168
0.174661268582532
0.394959662477209
0
writeClipboard(as.character(fcMatlabZeroAR$mean))
writeClipboard(as.character(fcMatlabZeroSAR$mean))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
fitMatlabZeroSAR$coef
fitMatlabZeroAR$coef
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fcMatlabZeroSAR$mean))
writeClipboard(as.character(fcMatlabZeroAR$mean))
plot(fcMatlabZeroAR, xlab='Matlab-fitted model forecast, zero AR')
fitMatlabZeroAR$coef
source('~/PhD/femc/R_forecasting/generateValidationData.R')
writeClipboard(as.character(fcMatlabZeroAR$mean))
writeClipboard(as.character(fcMatlabZeroSAR$mean))
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
source('~/PhD/femc/R_forecasting/generateValidationData.R')
min(1,2,3)
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
forecast(demandData)
dataSoFarTS
plot(dataSoFarTS)
forecast(dataSoFarTS)
plot(forecast(demandSoFarTS))
plot(forecast(dataSoFarTS))
plot(forecast(dataSoFarTS)$mean)
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean))
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean), type='l')
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS)$mean, h=48), type='l')
plot(c(tail(dataSoFarTS, n=48), forecast(dataSoFarTS, h=48)$mean), type='l')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('~/PhD/femc/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
results_NP_df
results_NP_df$mean <- mean(results_NP_df$X1, results_NP_df$X2)
results_NP_df$mean <- 0.5*(results_NP_df$X1 + results_NP_df$X2)
results_NP_df
rowNames(results_NP_df)
rownames(results_NP_df)
plot(rownames(results_NP_df), results_NP_df$mean)
plot(rownames(results_NP_df), results_NP_df$mean, type='l')
results_automated_df$mean <- 0.5*(results_automated_df$X1 + results_automated_df$X2)
lines(rownames(results_automated_df), results_automated_df$mean, col='red')
plot(rownames(results_NP_df), results_automated_df$mean/results_NP_df$mean, type='l')
accuracy(NP, actual)
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
source('C:/LocalData/Documents/Documents/PhD/21_Projects/2015_10_17_Forecast_Error_Metric_Customisation_MATLAB/R_forecasting/demand_forecasting.R')
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X#)
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(NP_MAPE$X1[[]], NP_MAPE$X2[[]], NP_MAPE$X3[[]])
NP_MAPE$X1[[]]
NP_MAPE$X1
mean(NP_MAPE$X1)
mean(NP_MAPE$X1[[]], NP_MAPE$X2[[]], NP_MAPE$X3[[]])
mean(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
mean(cbind(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3)
)
mean(rbind(NP_MAPE$X1, NP_MAPE$X2, NP_MAPE$X3))
rowMeans(NP_MAPE)
rowMeans(NP_MAPE[, 3])
rowMeans(NP_MAPE[, 2:3])
rowMeans(NP_MAPE[, 3:3])
rowMeans(NP_MAPE[, 1:3])
rowSds
NP_MAPE
transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -c("mean")],1,sd,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -c('mean')],1,sd,na.rm=TRUE))
transform(NP_MAPE, std=apply(NP_MAPE[, -('mean')],1,sd,na.rm=TRUE))
NP_MAPE[, "mean"]
NP_MAPE[, 'mean']
NP_MAPE[, ('mean')]
NP_MAPE[, c("mean")]
NP_MAPE
transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE
NP_MAPE[, c("mean")]
NP_MAPE[, -c("mean")]
NP_MAPE[, -c('mean)]
NP_MAPE[, -c('mean;')]
NP_MAPE[, -c('mean')]
NP_MAPE
transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)) +
geom_line((x = rownames(auto_MAPE), y = auto_MAPE$mean))
ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std))
NP_MAPE
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, mean=apply(auto_MAPE,1,mean,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, std=apply(subset(auto_MAPE, select=-mean),1,sd,na.rm=TRUE))
NP_MAPE
auto_MAPE
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)) +
geom_line(aes(x = rownames(auto_MAPE), y = auto_MAPE$mean, col='red')))
rbind(NP_MAPE$mean, auto_MAPE$mean)
print(ggplot(NP_MAPE, aes(x = rownames(NP_MAPE), y = rbind(NP_MAPE$mean, auto_MAPE$mean))) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(NP_MAPE, aes(x = rbind(rownames(NP_MAPE), rownames(auto_MAPE)),
y = rbind(NP_MAPE$mean, auto_MAPE$mean))) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
NP_MAPE <- transform(NP_MAPE, mean=apply(NP_MAPE,1,mean,na.rm=TRUE))
NP_MAPE <- transform(NP_MAPE, std=apply(subset(NP_MAPE, select=-mean),1,sd,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, mean=apply(auto_MAPE,1,mean,na.rm=TRUE))
auto_MAPE <- transform(auto_MAPE, std=apply(subset(auto_MAPE, select=-mean),1,sd,na.rm=TRUE))
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPEE$mean, NP_std = NP_MEAN$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPE$mean, NP_std = NP_MEAN$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
NP_MAPE
auto_MAPE
MAPEresults <- data.frame(nCustomers=nCustomers, NP_mean=NP_MAPE$mean, NP_std = NP_MAPE$std,
auto_mean=auto_MAPE$mean, auto_std=auto_MAPE$std)
MAPEresults
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)))
geom_line(aes(y=auto_mean, colour='black')) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, colour='black')) +
geom_errorbar(aes(ymin = mean-std, ymax = mean+std)))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, colour='red')))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, col='black')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='red')))
print(ggplot(MAPEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
MSEresults <- data.frame(nCustomers=nCustomers, NP_mean=apply(results_NP_df,1,mean,na.rm=TRUE),
NP_std = apply(results_NP_df,1,sd,na.rm=TRUE),
auto_mean=apply(results_automated_df,1,mean,na.rm=TRUE),
auto_std=apply(results_automated_df,1,sd,na.rm=TRUE),
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
)
MSEresults
MSEresults <- data.frame(nCustomers=nCustomers, NP_mean=apply(results_NP_df,1,mean,na.rm=TRUE),
NP_std = apply(results_NP_df,1,sd,na.rm=TRUE),
auto_mean=apply(results_automated_df,1,mean,na.rm=TRUE),
auto_std=apply(results_automated_df,1,sd,na.rm=TRUE))
print(ggplot(MSEresults, aes(x = nCustomers)) +
geom_line(aes(y=NP_mean, colour='NP')) +
geom_errorbar(aes(ymin = NP_mean-NP_std, ymax = NP_mean+NP_std)) +
geom_line(aes(y=auto_mean, col='Auto')))
historicData <- read.table('historicData.csv', header=FALSE, sep=',')
pwd
pwd()
getwd()
cd..
cd('../')
setwd('../functions//Rforecasting')
historicData <- read.table('historicData.csv', header=FALSE, sep=',')
historicData
summary(historicData)
str(historicData)
horizon <- read.table('intervalsToForecast.csv', header=FALSE, sep=',')
horizon
k <- read.table('seasonality.csv', header=FALSE, sep=',')
k
library(forecast)
historicDataTimeSeries <- ts(historicData, frequency=k);
str(historicData)
str(as.numeric(historicData))
str(as.numeric(historicData$V1))
historicDataTimeSeries <- ts(historicData$V1, frequency=k);
historicDataTimeSeries <- ts(as.numeric(historicData$V1), frequency=k);
k
historicDataTimeSeries <- ts(historicData$V1, frequency=k$V1);
thisForecast <- forecast(historicDataTimeSeries, h=horizon$V1)
plot(thisForecast)
thisForecast$mean
horizon
library(forecast)
getwd()
rnorm(4)
rnorm(4)
plot(rnorm(4))
plot(rnorm(100))
plot(rnorm(100), type='l')
acf(rnorm(100))
acf(rnorm(100))
acf(rnorm(100))
acf(rnorm(1000))
acf(rnorm(1000))
acf(rnorm(1000))
acf(rnorm(1000))
Pacf(rnorm(1000))
acf(rnorm(1000))
acf(rnorm(1000))
seq(1,1,1)
seq(1,2,1)
seq(1,2,10)
seq(1,20,10)
seq(1,20,0.1)
1:0.1:20
1:0.1:20
1:20
20:1
plot(sin(1:20))
plot(sin(1:20), typ='l')
plot(sin(1:40), typ='l')
plot(sin(1:2:40), typ='l')
plot(sin(1:2:40), typ='l')
1:2:20
seq(1,20,2)
plot(sin(seq(1,40,2)), typ='l')
plot(sin(seq(1,40,3)), typ='l')
seq(1,3,0.5)
seq(from=0,by=0.5,length.out=3)
periodLength = 48                         #intervals
historicDataLength = 200*periodLength
forecastHorizon = 1
noiseLevel = 2
tSample = (2*pi)/periodLength
tSample
sampleTimes = seq(from=0, by=tSample, length.out=historicDataLength)
sampleTimes
length(sampleTimes)
historicData = sin(sampleTimes) + rnorm(length(sampleTimes))*noiseLevel
plot(historicData)
plot(historicData, typ='l')
plot(historicData(1:100), typ='l')
plot(historicData[1:100], typ='l')
# Running settings
periodLength = 48                         #intervals
historicDataLength = 200*periodLength
forecastHorizon = 1
noiseLevel = 0.2
tSample = (2*pi)/periodLength
# Produce example historic data:
sampleTimes = seq(from=0, by=tSample, length.out=historicDataLength)
historicData = sin(sampleTimes) + rnorm(length(sampleTimes))*noiseLevel
plot(historicData[1:100], typ='l')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
thisForecast
str(thisForecast)
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
thisForecase$mean
thisForecast$mean
plot(historicData[c((historicDataLength-periodLength):historicDataLength],
thisForecast$mean)
plot(c(historicData[(historicDataLength-periodLength):historicDataLength],
thisForecast$mean))
plot(c(historicData[(historicDataLength-periodLength):historicDataLength],
thisForecast$mean), type='l')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
length(thisForecast$mean)
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
(historicDataLength+1):(historicDataLength+length(thisForecast$mean))
(periodLength+1):(periodLength+length(thisForecast$mean))
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
(periodLength+1):(periodLength+length(thisForecast$mean))
c(historicData[(historicDataLength-periodLength):historicDataLength],
thisForecast$mean)
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
ts(historicData)
str(ts(historicData))
summary(ts(historicData))
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
install.packages(tictoc)
install.packages('tictoc')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
toc
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/.active-rstudio-document')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
library(forecast)
# Load packages & seed analysis
library(tictoc)
library(forecast)
set.seed(42)
# Running settings
periodLength <- 48                         #intervals
historicDataLength <- 200*periodLength
forecastHorizon <- periodLength
noiseLevel <- 1.0
tSample <- (2*pi)/periodLength
tic()
# Produce example historic data:
sampleTimes <- seq(from=0, by=tSample, length.out=historicDataLength)
historicData <- sin(sampleTimes) + rnorm(length(sampleTimes))*noiseLevel
historicDataTS <- ts(historicData)
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE)
summary(etsForecasT)
summary(etsForecastr)
summary(etsForecast)
head(etsForecast)
str(etsForecast)
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE)
str(etsForecast)
plot(etsForecast)
# Generate ETS forecast:
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=c(80,95))#FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=c(80,95))#FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=c(80,95))#FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE)
toc()
# Generate ETS forecast:
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=TRUE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=TRUE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=TRUE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=FALSE)
toc()
tic()
etsForecast <- forecast(historicDataTS, h=forecastHorizon, find.frequency=TRUE,
level=FALSE, robust=FALSE)
toc()
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
exit
q()
source('~/PhD/femc/functions/Rforecasting/test_forecast.R')
