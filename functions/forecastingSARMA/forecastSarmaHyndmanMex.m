%% SARMA forecast using method described by Hyndman in:
% https://www.otexts.org/fpp/8/8

function forecast = forecastSarmaHyndmanMex(demand, ...
    phiValues, PhiValues, k) %#codegen

% Assert input types
% NB: need lags up to p + k*P, where p is AR order, P is seasonal AR order
% of model and k is the seasonal period
assert(all(size(demand) == [k+3 1]));

% Pre-allocate output forecast
forecast = zeros([k 1], 'like', demand);

for thisK = 1:k;
    if(thisK<=1)
        forecast(thisK) =  phiValues(1)*demand(end + thisK - 1) + ...
            phiValues(2)*demand(end + thisK - 2) + ...
            phiValues(3)*demand(end + thisK - 3) + ...
            PhiValues*demand(end + thisK - k) - ...
            phiValues(1)*PhiValues*demand(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*demand(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
        
    elseif(thisK<=2)
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*demand(end + thisK - 2) + ...
            phiValues(3)*demand(end + thisK - 3) + ...
            PhiValues*demand(end + thisK - k) - ...
            phiValues(1)*PhiValues*demand(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*demand(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
        
    elseif(thisK<=3)
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*forecast(thisK - 2) + ...
            phiValues(3)*demand(end + thisK - 3) + ...
            PhiValues*demand(end + thisK - k) - ...
            phiValues(1)*PhiValues*demand(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*demand(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
        
    elseif(thisK<=k)
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*forecast(thisK - 2) + ...
            phiValues(3)*forecast(thisK - 3) + ...
            PhiValues*demand(end + thisK - k) - ...
            phiValues(1)*PhiValues*demand(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*demand(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
        
    elseif(thisK<=(k+1))
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*forecast(thisK - 2) + ...
            phiValues(3)*forecast(thisK - 3) + ...
            PhiValues*forecast(thisK - k) - ...
            phiValues(1)*PhiValues*forecast(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*demand(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
    elseif(thisK<=(k+2))
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*forecast(thisK - 2) + ...
            phiValues(3)*forecast(thisK - 3) + ...
            PhiValues*forecast(thisK - k) - ...
            phiValues(1)*PhiValues*forecast(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*forecast(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*demand(end + thisK - k - 3);
    else
        forecast(thisK) =  phiValues(1)*forecast(thisK - 1) + ...
            phiValues(2)*forecast(thisK - 2) + ...
            phiValues(3)*forecast(thisK - 3) + ...
            PhiValues*forecast(thisK - k) - ...
            phiValues(1)*PhiValues*forecast(end + thisK - k - 1) - ...
            phiValues(2)*PhiValues*forecast(end + thisK - k - 2) - ...
            phiValues(3)*PhiValues*forecast(end + thisK - k - 3);
    end
end
end
